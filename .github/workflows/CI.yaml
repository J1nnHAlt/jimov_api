name: CI


on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up git
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper stats

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'

      - name: Install dependencies
        run: npm i 

      - name: Install typescript
        run: npm i typescript

      - name: Measure start time
        id: build-start
        run: echo "build_start=$(date +%s)" >> $GITHUB_ENV

      - name: Build Project
        run: npm run build

      - name: Measure end time
        run: |
          build_end=$(date +%s)
          build_duration=$((build_end - ${{ env.build_start }}))
          echo "build_duration=$build_duration" >> $GITHUB_ENV

      - name: Generate build report
        run: |
          echo "## Build Report" > build-report.md
          echo "- Build timestamp: $(date)" >> build-report.md
          echo "- Node version: $(node -v)" >> build-report.md
          echo "- NPM version: $(npm -v)" >> build-report.md
          echo "- Build status: Success" >> build-report.md
          echo "- Build duration: ${{ env.build_duration }} seconds" >> build-report.md
          echo "- OS: $(uname -a)" >> build-report.md
          echo "- GitHub Workflow: ${{ github.workflow }}" >> build-report.md
          echo "- Commit: ${{ github.sha }}" >> build-report.md
          echo "- Branch: ${{ github.ref_name }}" >> build-report.md
          
          echo "## Package Information" >> build-report.md
          if [ -f "package.json" ]; then
            echo "- Package name: $(grep -m 1 '"name":' package.json | cut -d '"' -f 4)" >> build-report.md
            echo "- Package version: $(grep -m 1 '"version":' package.json | cut -d '"' -f 4)" >> build-report.md
          fi
          
          echo "## Repository Stats" >> build-report.md
          echo "- Total files: $(find . -type f -not -path "*/node_modules/*" -not -path "*/\.*" | wc -l)" >> build-report.md
          echo "- JS/TS files: $(find . -name "*.js" -o -name "*.ts" -not -path "*/node_modules/*" | wc -l)" >> build-report.md
          
          if [ -d "dist" ]; then
            echo "## Build Output Analysis" >> build-report.md
            echo "- Total build size: $(du -sh dist | cut -f1)" >> build-report.md
            echo "- File count: $(find dist -type f | wc -l)" >> build-report.md
          elif [ -d "build" ]; then
            echo "## Build Output Analysis" >> build-report.md
            echo "- Total build size: $(du -sh build | cut -f1)" >> build-report.md
            echo "- File count: $(find build -type f | wc -l)" >> build-report.md
          fi
      
      - name: Run tests with coverage report
        id: test
        continue-on-error: true
        run: npm run test

      - name: Record test status
        run: |
          if [ "${{ steps.test.outcome }}" == "failure" ]; then
            echo "- Test status: Failed ❌" >> test-report.md
          else
            echo "- Test status: Passed ✅" >> test-report.md
          fi

      - name: Generate test coverage report
        run: |
          echo "## Test Coverage Report" > test-report.md
          if [ -f "coverage/lcov-report/index.html" ]; then
            cat coverage/lcov-report/index.html | grep -o '<span class="strong">[^<]*%' | head -3 >> test-report.md || echo "- Coverage data extraction failed" >> test-report.md
          else
            echo "- Coverage report not generated" >> test-report.md
          fi
          echo "- Tests executed at: $(date)" >> test-report.md

      - name: Run formating
        run: npm run format

      - name: Run linter
        continue-on-error: true
        run: npm run linter

      - name: Set deployment environment
        id: set-environment
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=production" >> $GITHUB_ENV
            echo "environment_url=https://production.example.com" >> $GITHUB_ENV
          else
            echo "environment=staging" >> $GITHUB_ENV
            echo "environment_url=https://staging.example.com" >> $GITHUB_ENV
          fi

      - name: Start deployment
        id: deployment-start
        run: |
          echo "deploy_start=$(date +%s)" >> $GITHUB_ENV
          echo "Starting deployment to ${{ env.environment }} environment..."

      - name: Run deployment
        id: deploy
        continue-on-error: true
        run: |
          echo "Starting deployment server for 30 seconds..."
          timeout 30s npm run start || echo "Deployment server ran for 30 seconds and was terminated"

      - name: Generate deployment report
        run: |
          deploy_end=$(date +%s)
          deploy_duration=$((deploy_end - ${{ env.deploy_start }}))
          
          echo "## Deployment Report" > deploy-report.md
          echo "- Deployment timestamp: $(date)" >> deploy-report.md
          echo "- Environment: ${{ env.environment }}" >> deploy-report.md
          echo "- Environment URL: ${{ env.environment_url }}" >> deploy-report.md
          echo "- Deployment status: ${{ steps.deploy.outcome == 'success' && 'Success ✅' || 'Completed with issues ⚠️' }}" >> deploy-report.md
          echo "- Deployment duration: ${deploy_duration} seconds" >> deploy-report.md
          echo "- Deploying branch: ${{ github.ref_name }}" >> deploy-report.md
          echo "- Commit SHA: ${{ github.sha }}" >> deploy-report.md
          echo "- Commit author: ${{ github.actor }}" >> deploy-report.md
          
          # Get deployment configuration
          echo "## Deployment Configuration" >> deploy-report.md
          echo "- Node environment: $NODE_ENV" >> deploy-report.md
          echo "- Server: $(node -v)" >> deploy-report.md
          
          # Memory and resource usage (if available)
          echo "## Resource Usage" >> deploy-report.md
          echo "- Memory available: $(free -h | grep Mem | awk '{print $2}')" >> deploy-report.md
          echo "- Memory used: $(free -h | grep Mem | awk '{print $3}')" >> deploy-report.md
          echo "- Disk space: $(df -h . | awk 'NR==2 {print $4}') free" >> deploy-report.md
          
          # Application health check
          echo "## Application Health" >> deploy-report.md
          if [[ "${{ steps.deploy.outcome }}" == "success" ]]; then
            echo "- Status: Application started successfully" >> deploy-report.md
          else
            echo "- Status: Application terminated after timeout period" >> deploy-report.md
          fi
          
          # Log any environment-specific information
          if [[ "${{ env.environment }}" == "staging" ]]; then
            echo "## Staging Environment Details" >> deploy-report.md
            echo "- Debug mode: Enabled" >> deploy-report.md
            echo "- Feature flags: All enabled" >> deploy-report.md
            echo "- API endpoints: Mock services" >> deploy-report.md
          elif [[ "${{ env.environment }}" == "production" ]]; then
            echo "## Production Environment Details" >> deploy-report.md
            echo "- Debug mode: Disabled" >> deploy-report.md
            echo "- Feature flags: Production configuration" >> deploy-report.md
            echo "- API endpoints: Live services" >> deploy-report.md
          fi

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: |
            coverage/
            test-report.md
            
      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deploy-report.md